HTTP协议：
目前普遍使用的是http1.1版本，定义了从web服务器传输超文本到浏览器的传输协议，http是应用层协议（对应网络七层协议的第7层，同属于这一层的还有 ftp、smtp、telnet 协议等），本身是无状态的（通常使用cookie+seession实现有状态，但不限这种方式）,request/response模式（也即客户端不发起请求，服务端无法将消息推送给客户端），默认端口号是80

HTTP1.1 vs HTTP1.0的区别：
1.默认长连接(http header中connection=keep-alive);
2.增加了host域;
3.增加了header消息：返回状态码100（continue），客户端在发request消息body之前先用request header试探一下server，看server要不要接收request body，再决定要不要发request body,客户端在Request头部中要包含Expect: 100-continue
关于header消息的应用场景：
http 100-continue用于客户端在发送POST数据给服务器前，征询服务器情况，看服务器是否处理POST的数据，如果不处理，客户端则不上传POST数据，如果处理，则POST上传数据。在现实应用中，通过在POST大数据时，才会使用100-continue协议。比如，在使用curl做POST的时候, 当要POST的数据大于1024字节的时候, curl并不会直接就发起POST请求, 而是会分为俩步，第一步发送一个请求, 包含一个Expect:100-continue, 询问Server使用愿意接受数据，第二步接收到Server返回的100-continue应答以后, 才把数据POST给Server
4.HTTP1.1增加了OPTIONS, PUT, DELETE, TRACE, CONNECT这些Request方法（Http1.0只定义了get、post和head方法）;

HTTP OPTIONS请求
旨在发送一种“探测”请求以确定针对某个目标地址的请求必须具有怎样的约束（比如应该采用怎样的HTTP方法以及自定义的请求报头），然后根据其约束发送真正的请求。比如针对“跨域资源”的预检（Preflight）请求采用的HTTP方法就是OPTIONS
用于返回服务器针对特定资源所支持的HTTP请求方法，若请求成功，服务器会在HTTP响应头中包含一个名为“Allow”的头，值是所支持的方法，如“GET, POST”

HTTP Head请求（http1.0中提供）
向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息，主要用于根据响应状态码确认资源对象是否存在或者测试资源是否被修改过

HTTP PUT请求 和 POST请求的区别：
主要根据幂等性进行区分，先理解一下幂等性的概念
幂等性概念：一个幂等操作的特点就是其任意多次执行所产生的影响均与依次一次执行的影响相同
REST请求中的幂等性操作:GET，PUT，DELETE都是幂等操作，而POST不是
GET请求：很好理解，对资源做查询多次，此实现的结果都是一样的；
PUT请求：将A修改为B，它第一次请求值变为了B，再进行多次此操作，最终的结果还是B，与一次执行的结果是一样的，所以PUT是幂等操作；
DELETE请求：第一次将资源删除后，后面多次进行此删除请求，最终结果是一样的，将资源删除掉了；
POST请求：不是幂等操作，因为一次请求添加一份新资源，二次请求则添加了两份新资源，多次请求会产生不同的结果，因此POST不是幂等操作；

HTTP GET请求与POST请求的区别:
1.Get方式在通过URL提交数据，数据在URL中可以看到；POST方式，数据放置在请求消息主体内提交;
2.GET方式提交的数据最多只能有1024字节（好像还依赖浏览器限制），而POST则没有此限制;
4.安全性问题;
5.幂等性：get请求是幂等的，post请求不是；

一些重要的HTTP请求头域：
1.Referer:允许客户端指定请求uri的源资源地址，这可以允许服务器生成回退链表;
2.Cache-Control：指定请求和响应遵循的缓存机制，在请求消息或响应消息中设置Cache-Control并不会修改另一个消息处理过程中的缓存处理过程（即影响范围是某次请求响应）;
3.Connection:指定是否使用长连接，值keep-alive表示使用，值 close 表示不使用，http1.1协议默认使用长连接,不论request还是response的header中包含了值为close的connection，都表明当前正在使用的tcp链接在当次请求处理完毕后会被断掉。以后client再进行新的请求时就必须创建新的tcp链接了,设置为 keep-alive 的长连接需要设置 timeout 时间，避免链接长时间占用系统资源；
4.If-Modified-Since/If-None-Match：只有当所请求的内容在指定的日期之后又经过修改才返回内容，否则返回304“Not Modified”应答;(ctrl+F5强制刷新不经过这个过程)
5.Accept-Encoding:浏览器能够进行解码的数据编码方式;
6.Accept:浏览器可以接受的MIME类型；
7.Accept-Charset:浏览器可以接受的字符集；
8.Content-Length：表示请求消息正文的长度;

一些重要的响应头域：
1.Content-Encoding：文档的编码（Encode）方法,只有在解码之后才可以得到Content-Type头指定的内容类型;
2.Content-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据;
3.Content-Type： 表示后面的文档属于什么MIME类型;
4.Last-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态;
5.expires：需和Last-Modified/etag结合使用，用于控制请求文件的有效时间，当请求数据在有效期内时客户端浏览器从缓存请求数据而不是服务器端.当缓存中数据失效或过期，才决定从服务器更新数据,Expires的一个缺点就是，返回的到期时间是服务器端的时间，这样存在一个问题，如果客户端的时间与服务器的时间相差很大，那么误差就很大，所以在HTTP 1.1版开始，使用Cache-Control: max-age=秒替代;

各种常见返回状态码含义：
1.100：服务端告诉客户端，必须继续发出body请求
2.200：成功
3.302：重定向（1.0协议）
4.303：重定向（1.1协议）
4.304：客户端缓存的文件没有变化
5.403：禁止访问
6.404：没有找到文件
7.500：服务器内部错误

请求和响应头中的一个重要信息：Cookie
Cookie的生命周期问题
设置Cookie对象的有效时间， setMaxAge()方法便可以设置Cookie对象的有效时间，
例如：Cookie c = new Cookie("username","john");
c.setMaxAge(60);//60秒的意思
c.setMaxAge(60*60);//一小时
c.setMaxAge(365*24*60*60);//一年

会话cookie：
如果不设置过期时间，则表示这个cookie生命周期为浏览器会话期间，只要关闭浏览器窗口，cookie就消失了
这种生命期为浏览会话期的cookie被称为会话cookie。会话cookie一般是保存在内存里（相比持久化cookie保存在硬盘上）
持久化cookie：
如果设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie依然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存的cookie，不同的浏览器有不同的处理方式。
cookie.setmaxage设置为0时，会马上在浏览器上删除指定的cookie；
cookie.setmaxage设置为-1时，代表关闭当前浏览器即失效（会话 cookie）；
cookie.setmaxage设置为大于0的值时，代表持久化cookie；

cookie 和 seesion
目的是为了解决http无状态的问题，seesion可以基于cookie来实现，也可以用其他方式来实现（比如UrlRewrite或隐藏表单字段）
UrlRewrite是指服务器在发送给浏览器页面的所有链接中都携带标识状态的参数（比如JSESSIONID），这样客户端点击任何一个链接都会把该参数带回服务器

浏览器客户端缓存的常见流程
1.服务器收到请求时，会在200 OK中回送该资源的Last-Modified或ETag头（或两者都有），并配合Expires（http1.0）或Cache-Control:max-age（http1.1）头使用（两者都存在的时候，cache-control覆盖Expires）；
2.客户端将该资源保存在cache中，并记录Last-Modified和ETag的值;
3.当客户端需要请求相同的资源时，首先看Expires或Cache-Control约定的资源缓存有效时间是否过期，如果没有过期则直接从缓存中返回（响应状态码200）;
4.如果约定的缓存资源有效期到了，则会发送请求并在请求中携带If-Modified-Since或If-None-Match两个头，两个头的值分别是之前服务器返回的Last-Modified和ETag头的值，服务器通过这两个请求头的值判断本地资源内容是否未发生变化，如果没有发生变化，则客户端不需要重新下载，返回304响应；
5.如果服务器通过这两个请求头的值判断本地资源内容发生了变化，则返回新的资源内容，成功返回状态码200；

有Last-Modified为什么要引入Etag？
Etag主要为了解决Last-Modified无法解决的一些问题：
1、一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET;
2、某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)
3、某些服务器不能精确的得到文件的最后修改时间；

http短轮询 vs http长轮询
http 长轮询是服务器收到请求后如果有数据, 立刻响应请求; 如果没有数据就会 hold 一段时间, 这段时间内如果有数据立刻响应请求; 如果时间到了还没有数据, 则响应 http 请求;浏览器受到 http 响应后立在发送一个同样 http 请求查询是否有数据
长轮询的局限:
1）浏览器端对统一服务器同时 http 连接有最大限制, 最好同一用户只存在一个长轮询;
2)服务器端没有数据 hold 住连接时会造成浪费, 容易产生服务器瓶颈;

http短轮询是服务器收到请求不管是否有数据都直接响应 http 请求; 浏览器受到 http 响应隔一段时间在发送同样的 http 请求查询是否有数据
短轮询的局限:实时性低

两者相同点：
可以看出 http 长轮询和 http 短轮询的都会 hold 一段时间;
两者不同点：
间隔发生在服务端还是浏览器端: http 长轮询在服务端会 hold 一段时间, http 短轮询在浏览器端 hold一段时间;

url encode/decode
使用post时数据会放到http报文中间传输过去，是不需要做任何操作的，浏览器和服务端自动encode和自动decode
当使用get方法传输数据时，而且传输的数据中包含中文、特殊符号等字符时，就需要用encode进行编码
为什么要做url encode？
正确传递和获取参数：比如参数是一个回调的url 地址、参数中带@、&、中文等特殊字符等；

Base64编码
Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。
Base64编码是从二进制到字符的过程，可用于在HTTP环境下传递较长的标识信息。例如，在Java Persistence系统Hibernate中，就采用了Base64来将一个较长的唯一标识符（一般为128-bit的UUID）编码为一个字符串，用作HTTP表单和HTTP GET URL中的参数。在其他应用程序中，也常常需要把二进制数据编码为适合放在URL（包括隐藏表单域）中的形式。此时，采用Base64编码具有不可读性，需要解码后才能阅读。

为什么有了Base64编码，还要 url encode？
Base64编码使用的字符包括大小写字母各26个，加上10个数字，和加号“+”，斜杠“/”，一共64个字符，等号“=”用来作为后缀用途。
其中的+, /, = 都是需要urlencode的，所以无法取代。
